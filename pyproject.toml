[build-system]
    build-backend = "setuptools.build_meta"
    requires = [
        "setuptools>=47",
        "wheel>=0.34",
        "cython>=0.29.24; python_implementation == 'CPython'", # Skip cython when using pypy
    ]

[tool.black]
line-length = 79
target-version = ['py37']

[tool.zimports]
black-line-length = 79
keep-unused-type-checking = true

[tool.slotscheck]
exclude-modules = '^sqlalchemy\.testing'


[tool.pytest.ini_options]
addopts = "--tb native -v -r sfxX --maxfail=250 -p warnings -p logging --strict-markers"
norecursedirs = "examples build doc lib"
python_files = "test_*.py"
minversion = "6.2"
filterwarnings = [
    # NOTE: additional SQLAlchemy specific filters in
    # sqlalchemy/testing/warnings.py.   SQLAlchemy modules cannot be named
    # here as pytest loads them immediately, which breaks coverage as well
    # as sys.path adjustments in conftest.py
    "error::DeprecationWarning:test",
    "error::DeprecationWarning:sqlalchemy"
]
markers = [
    "memory_intensive: memory / CPU intensive suite tests",
    "mypy: mypy integration / plugin tests",
    "timing_intensive: time-oriented tests that are sensitive to race conditions",
    "backend: tests that should run on all backends; typically dialect-sensitive",
    "sparse_backend: tests that should run on multiple backends, not necessarily all",
]

[tool.pyright]


reportPrivateUsage = "none"
reportUnusedClass = "none"
reportUnusedFunction = "none"
reportTypedDictNotRequiredAccess = "warning"
#reportIncompatibleMethodOverride = "error"

[tool.mypy]
mypy_path = "./lib/"
show_error_codes = true
strict = false
incremental = true

# disabled checking
[[tool.mypy.overrides]]
module="sqlalchemy.*"
ignore_errors = true
warn_unused_ignores = false

strict = true

# some debate at
# https://github.com/python/mypy/issues/8754.
# implicit_reexport = true

# individual packages or even modules should be listed here
# with strictness-specificity set up.  there's no way we are going to get
# the whole library 100% strictly typed, so we have to tune this based on
# the type of module or package we are dealing with

[[tool.mypy.overrides]]
# ad-hoc ignores
module = [
    "sqlalchemy.engine.reflection",  # interim, should be strict
]

ignore_errors = true

# strict checking
[[tool.mypy.overrides]]
module = [
    "sqlalchemy.sql.annotation",
    "sqlalchemy.sql.cache_key",
    "sqlalchemy.sql._elements_constructors",
    "sqlalchemy.sql.operators",
    "sqlalchemy.sql.type_api",
    "sqlalchemy.sql.roles",
    "sqlalchemy.sql.visitors",
    "sqlalchemy.sql._py_util",
    "sqlalchemy.connectors.*",
    "sqlalchemy.engine.*",
    "sqlalchemy.ext.hybrid",
    "sqlalchemy.ext.associationproxy",
    "sqlalchemy.pool.*",
    "sqlalchemy.event.*",
    "sqlalchemy.events",
    "sqlalchemy.exc",
    "sqlalchemy.inspection",
    "sqlalchemy.schema",
    "sqlalchemy.types",
]
ignore_errors = false
strict = true

# partial checking
[[tool.mypy.overrides]]

module = [
    #"sqlalchemy.sql.*",
    "sqlalchemy.sql.sqltypes",
    "sqlalchemy.sql.elements",
    "sqlalchemy.sql.coercions",
    "sqlalchemy.sql.compiler",
    #"sqlalchemy.sql.default_comparator",
    "sqlalchemy.sql.naming",
    "sqlalchemy.sql.traversals",
    "sqlalchemy.util.*",
    "sqlalchemy.engine.cursor",
    "sqlalchemy.engine.default",
]


ignore_errors = false

# mostly strict without requiring totally untyped things to be
# typed
strict = true
allow_untyped_defs = true
allow_untyped_calls = true
