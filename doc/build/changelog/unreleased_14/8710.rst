.. change::
    :tags: bug, orm
    :tickets: 8710

    Fixed issue where the underlying DBAPI cursor would not be closed when
    using the :class:`_orm.Query` object as an iterator, if a user-defined exception
    case were raised within the iteration process, thereby causing the iterator
    to be closed by the Python interpreter.  When using
    :meth:`_orm.Query.yield_per` to create server-side cursors, this would lead
    to the usual MySQL-related issues with server side cursors out of sync,
    and without direct access to the :class:`.Result` object, end-user code
    could not access the cursor in order to close it.

    To resolve, a catch for ``GeneratorExit`` is applied within the iterator
    method, which will close the result object in those cases when the
    iterator were interrupted, and by definition will be closed by the
    Python interpreter.

    As part of this change as implemented for the 1.4 series, ensured that
    ``.close()`` methods are available on all :class:`.Result` implementations
    including :class:`.ScalarResult`, :class:`.MappingResult`.  The 2.0
    version of this change also includes new context manager patterns for use
    with :class:`.Result` classes.


.. change::
    :tags: bug, engine
    :tickets: 8710

    Ensured all :class:`.Result` objects include a :meth:`.Result.close` method
    as well as a :attr:`.Result.closed` attribute, including on
    :class:`.ScalarResult` and :class:`.MappingResult`.
