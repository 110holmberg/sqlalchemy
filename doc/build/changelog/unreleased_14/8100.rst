.. change::
    :tags: bug, reflection
    :tickets: 8100, 8101

    Fixed bugs involving the :paramref:`.Table.include_columns` and the
    :paramref:`.Table.resolve_fks` parameters on :class:`.Table`; these
    little-used parameters were apparently not working for columns that refer
    to foreign key constraints.

    In the first case, not-included columns that refer to foreign keys would
    still attempt to create a :class:`.ForeignKey` object, producing errors
    when attempting to resolve the columns for the foreign key constraint
    within reflection; foreign key constraints that refer to skipped columns
    are now omitted from the table reflection process in the same way as
    occurs for :class:`.Index` and :class:`.UniqueConstraint` objects with the
    same conditions. No warning is produced however, as we likely want to
    remove the include_columns warnings for all constraints in 2.0.

    In the latter case, the production of table aliases or subqueries would
    fail on an FK related table not found despite the presence of
    ``resolve_fks=False``; the logic has been repaired so that if a related
    table is not found, the :class:`.ForeignKey` object is still proxied to the
    aliased table or subquery (these :class:`.ForeignKey` objects are normally
    used in the production of join conditions), but it is sent with a flag that
    it's not resolvable. The aliased table / subquery will then work normally,
    with the exception that it cannot be used to generate a join condition
    automatically, as the foreign key information is missing. This was already
    the behavior for such foreign key constraints produced using non-reflection
    methods, such as joining :class:`.Table` objects from different
    :class:`.MetaData` collections.
