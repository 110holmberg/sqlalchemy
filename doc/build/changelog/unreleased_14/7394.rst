.. change::
    :tags: bug, sql
    :tickets: 7394

    Custom SQL elements, third party dialects, custom or third party datatypes
    will all generate consistent warnings when they do not clearly opt in or
    out of SQL statement caching, which is achieved by setting the appropriate
    attributes on each type of class. The warning links to documentation
    sections which indicate the appropriate approach for each type of object in
    order for caching to be enabled.

.. change::
    :tags: bug, sql
    :tickets: 7394

    Fixed missing caching directives for a few lesser used classes in SQL Core
    which would cause ``[no key]`` to be logged for elements which made use of
    these.

.. change::
    :tags: bug, postgresql
    :tickets: 7394

    Fixed missing caching directives for :class:`_postgresql.hstore` and
    :class:`_postgresql.array` constructs which would cause ``[no key]``
    to be logged for these elements.

.. change::
    :tags: bug, orm
    :tickets: 7394

    User defined ORM options, such as those illustrated in the dogpile.caching
    example which subclass :class:`_orm.UserDefinedOption`, by definition are
    handled on every statement execution and do not need to be considered as
    part of the cache key for the statement. Caching of the base
    :class:`.ExecutableOption` class has been modified so that it is no longer
    a :class:`.HasCacheKey` subclass directly, so that the presence of user
    defined option objects will not have the unwanted side effect of disabling
    statement caching. Only ORM specific loader and criteria options, which are
    all internal to SQLAlchemy, now participate within the caching system.

.. change::
    :tags: bug, orm
    :tickets: 7394

    Fixed issue where mappings that made use of :func:`_orm.synonym` and
    potentially other kinds of "proxy" attributes would not in all cases
    successfully generate a cache key for their SQL statements, leading to
    degraded performance for those statements.