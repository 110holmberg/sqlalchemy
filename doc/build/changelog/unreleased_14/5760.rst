.. change::
    :tags: bug, sql, orm
    :tickets: 5760, 5763, 5765, 5768, 5770

    A wide variety of fixes to the "lambda SQL" feature introduced at
    :ref:`engine_lambda_caching` have been implemented based on user feedback,
    with an emphasis on its use within the :func:`_orm.with_loader_criteria`
    feature where it is most prominently used [ticket:5760]:

    * fixed issue where boolean True/False values referred towards in the
      closure variables of the lambda would cause failures [ticket:5763]

    * Repaired a non-working detection for Python functions embedded in the
      lambda that produce bound values; this case is likely not supportable
      so raises an informative error, where the function should be invoked
      outside the lambda itself.  New documentation has been added to
      further detail this behavior. [ticket:5770]

    * The lambda system by default now rejects the use of non-SQL elements
      within the closure variables of the lambda entirely, where the error
      suggests the two options of either explicitly ignoring closure variables
      that are not SQL parameters, or specifying a specific set of values to be
      considered as part of the cache key based on hash value.   This critically
      prevents the lambda system from assuming that arbitrary objects within
      the lambda's closure are appropriate for caching while also refusing to
      ignore them by default, preventing the case where their state might
      not be constant and have an impact on the SQL construct produced.
      The error message is comprehensive and new documentation has been
      added to further detail this behavior. [ticket:5765]

    * Fixed support for the edge case where an ``in_()`` expression
      against a list of SQL elements, such as :func:`_sql.literal` objects,
      would fail to be accommodated correctly. [ticket:5768]


.. change::
    :tags: bug, orm
    :tickets: 5760, 5766, 5762, 5761, 5764

    Related to the fixes for the lambda criteria system within Core, within the
    ORM implemented a variety of fixes for the
    :func:`_orm.with_loader_criteria` feature as well as the
    :meth:`_orm.SessionEvents.do_orm_execute` event handler that is often
    used in conjunction [ticket:5760]:


    * fixed issue where :func:`_orm.with_loader_criteria` function would fail
      if the given entity or base included non-mapped mixins in its descending
      class hierarchy [ticket:5766]

    * The :func:`_orm.with_loader_criteria` feature is now unconditionally
      disabled for the case of ORM "refresh" operations, including loads
      of deferred or expired column attributes as well as for explicit
      operations like :meth:`_orm.Session.refresh`.  These loads are necessarily
      based on primary key identity where addiional WHERE criteria is
      never appropriate.  [ticket:5762]

    * Added new attribute :attr:`_orm.ORMExecuteState.is_column_load` to indicate
      that a :meth:`_orm.SessionEvents.do_orm_execute` handler that a particular
      operation is a primary-key-directed column attribute load, where additional
      criteria should not be added.  The :func:`_orm.with_loader_criteria`
      function as above ignores these in any case now.  [ticket:5761]

    * Fixed issue where the :attr:`_orm.ORMExecuteState.is_relationship_load`
      attribute would not be set correctly for many lazy loads as well as all
      selectinloads.  The flag is essential in order to test if options should
      be added to statements or if they would already have been propagated via
      relationship loads.  [ticket:5764]

