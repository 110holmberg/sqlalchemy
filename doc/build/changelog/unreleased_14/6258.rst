.. change::
    :tags: bug, sql
    :tickets: 6258 6397

    Revised the "EMPTY IN" expression to no longer rely upon using a subquery,
    as this was causing some compatibility and performance problems. The new
    approach for selected databases takes advantage of using a NULL-returning
    IN expression combined with the usual "1 != 1" or "1 = 1" expression
    appended by AND or OR. The expression is now the default for all backends
    other than SQLite, which still had some compatibility issues regarding
    tuple "IN" for older SQLite versions.

    Third party dialects can still override how the "empty set" expression
    renders by implementing a new compiler method
    ``def visit_empty_set_op_expr(self, type_, expand_op)``, which takes
    precedence over the existing
    ``def visit_empty_set_expr(self, element_types)`` which remains in place.

