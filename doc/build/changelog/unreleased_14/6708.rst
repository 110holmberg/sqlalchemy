.. change::
    :tags: usecase, orm
    :tickets: 6708

    Modified the approach used for history tracking of scalar object
    relationships that are not many-to-one, i.e. one-to-one relationships that
    would otherwise be one-to-many. When replacing a one-to-one value, the
    "old" value that would be replaced is no longer loaded immediately, and is
    instead handled during the flush process. This eliminates an historically
    troublesome lazy load that otherwise often occurs when assigning to a
    one-to-one attribute, and is particularly troublesome when using
    "lazy='raise'" as well as asyncio use cases.

    This change does cause a behavioral change within the
    :meth:`_orm.AttributeEvents.set` event, which is nonetheless currently
    documented, which is that the event applied to such a one-to-one attribute
    will no longer receive the "old" parameter if it is unloaded and the
    :paramref:`_orm.relationship.active_history` flag is not set. As is
    documented in :meth:`_orm.AttributeEvents.set`, if the event handler needs
    to receive the "old" value when the event fires off, the active_history
    flag must be established either with the event listener or with the
    relationship. This is already the behavior with other kinds of attributes
    such as many-to-one and column value references.

    The change additionally will defer updating a backref on the "old" value
    in the less common case that the "old" value is locally present in the
    session, but isn't loaded on the relationship in question, until the
    next flush occurs.  If this causes an issue, again the normal
    :paramref:`_orm.relationship.active_history` flag can be set to ``True``
    on the relationship.
