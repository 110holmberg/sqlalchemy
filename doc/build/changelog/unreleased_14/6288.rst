.. change::
    :tags: usecase, engine, orm
    :tickets: 6288

    Applied consistent behavior to the use case of
    calling ``.commit()`` or ``.rollback()`` inside of an existing
    ``.begin()`` context manager, with the addition of potentially
    emitting SQL within the block subsequent to the commit or rollback.
    This change continues upon the change first added in
    :ticket:`6155` where the use case of calling "rollback" inside of
    a ``.begin()`` contextmanager block was proposed:

    * calling ``.commit()`` or ``.rollback()`` will now be allowed
      without error or warning within all scopes, including
      that of legacy and future :class:`_engine.Engine`, ORM
      :class:`_orm.Session`, asyncio :class:`.AsyncEngine`.  Previously,
      the :class:`_orm.Session` disallowed this.

    * The remaining scope of the context manager is then closed;
      when the block ends, a check is emitted to see if the transaction
      was already ended, and if so the block returns without action.

    * It will now raise **an error** if subsequent SQL of any kind
      is emitted within the block, **after** ``.commit()`` or
      ``.rollback()`` is called.   The block should be closed as
      the state of the executable object would otherwise be undefined
      in this state.
