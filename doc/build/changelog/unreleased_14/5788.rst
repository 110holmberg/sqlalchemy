.. change::
    :tags: bug, mssql, mysql, datatypes
    :tickets: 5788
    :versions: 1.4.0b2

    Decimal accuracy and behavior has been improved when extracting floating
    point and/or decimal values from JSON strings using the
    :meth:`_sql.sqltypes.JSON.Comparator.as_float` method, when the numeric
    value inside of the JSON string has many significant digits; previously,
    MySQL backends would truncate values with many significant digits and SQL
    Server backends would raise an exception due to a DECIMAL cast with
    insufficient significant digits.   Both backends now use a FLOAT-compatible
    approach that does not hardcode significant digits for floating point
    values. For precision numerics, a new method
    :meth:`_sql.sqltypes.JSON.Comparator.as_numeric` has been added which
    accepts arguments for precision and scale, and will return values as Python
    ``Decimal`` objects with no floating point conversion assuming the DBAPI
    supports it (all but pysqlite).