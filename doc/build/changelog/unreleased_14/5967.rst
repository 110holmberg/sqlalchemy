.. change::
    :tags: usecase, postgresql, mysql, asyncio
    :tickets: 5967

    Added an ``asyncio.Lock()`` within SQLAlchemy's emulated DBAPI cursor,
    local to the connection, for the asyncpg and aiomysql dialects for the
    scope of the ``cursor.execute()`` and ``cursor.executemany()`` methods. The
    rationale is to prevent failures and corruption for the case where the
    connection is used in multiple awaitables at once.

    While this use case can also occur with threaded code and non-asyncio
    dialects, we anticipate this kind of use will be more common under asyncio,
    as the asyncio API is encouraging of such use. It's definitely better to
    use a distinct connection per concurrent awaitable however as concurrency
    will not be achieved otherwise.

    For the asyncpg dialect, this is so that the space between
    the call to ``prepare()`` and ``fetch()`` is prevented from allowing
    concurrent executions on the connection from causing interface error
    exceptions, as well as preventing race conditions when starting a new
    transaction. Other PostgreSQL DBAPIs are threadsafe at the connection level
    so this intends to provide a similar behavior, outside the realm of server
    side cursors.

    For the aiomysql dialect, the mutex will provide safety such that
    the statement execution and the result set fetch, which are two distinct
    steps at the connection level, won't get corrupted by concurrent
    executions on the same connection.

