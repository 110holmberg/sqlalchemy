.. change::
    :tags: sql
    :tickets: 4757

    Replace :meth:`_orm.Query.with_labels` and
    :meth:`_sql.GenerativeSelect.apply_labels` with explicit getters and
    setters :meth:`_sql.GenerativeSelect.get_label_style` and
    :meth:`_sql.GenerativeSelect.set_label_style` to accommodate the three
    supported label styles: :data:`_sql.LABEL_STYLE_DISAMBIGUATE_ONLY`,
    :data:`_sql.LABEL_STYLE_TABLENAME_PLUS_COL`, and
    :data:`_sql.LABEL_STYLE_NONE`.

    In addition, for Core and "future style" ORM queries,
    ``LABEL_STYLE_DISAMBIGUATE_ONLY`` is now the default label style. This
    style differs from the existing "no labels" style in that labeling is
    applied in the case of column name conflicts; with ``LABEL_STYLE_NONE``, a
    duplicate column name is not accessible via name in any case.

    For cases where labeling is significant, namely that the ``.c`` collection
    of a subquery is able to refer to all columns unambiguously, the behavior
    of ``LABEL_STYLE_DISAMBIGUATE_ONLY`` is now sufficient for all
    SQLAlchemy features across Core and ORM which involve this behavior.
    Result set rows since SQLAlchemy 1.0 are usually aligned with column
    constructs positionally.

    For legacy ORM queries using :class:`_query.Query`, the table-plus-column
    names labeling style applied by ``LABEL_STYLE_TABLENAME_PLUS_COL``
    continues to be used so that existing test suites and logging facilities
    see no change in behavior by default.
