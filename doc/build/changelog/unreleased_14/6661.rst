.. change::
    :tags: bug, orm
    :tickets: 6661

    Refined the behavior of ORM subquery rendering with regards to deferred
    columns and column properties to be more compatible with that of 1.3 while
    also providing for 1.4's newer features. As a subquery in 1.4 does not make
    use of loader options, including :func:`_orm.undefer`, a subquery that is
    against an ORM entity with deferred attributes will now render those
    deferred attributes that refer directly to mapped table columns, as these
    are needed in the outer SELECT if that outer SELECT makes use of these
    columns; however a deferred attribute that refers to a composed SQL
    expression as we normally do with :func:`_orm.column_property` will not be
    part of the subquery, as these can be selected explicitly if needed in the
    subquery. If the entity is being SELECTed from this subquery, the column
    expression can still render on "the outside" in terms of the derived
    subquery columns. This produces essentially the same behavior as when
    working with 1.3. However in this case the fix has to also make sure that
    the ``.selected_columns`` collection of an ORM-enabled :func:`_sql.select`
    also follows these rules, which in particular allows recursive CTEs to
    render correctly in this scenario, which were previously failing to render
    correctly due to this issue.
