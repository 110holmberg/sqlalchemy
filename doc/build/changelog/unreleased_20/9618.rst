.. change::
    :tags: bug, engine
    :tickets: 9618, 9603

    Repaired a major shortcoming which was identified in the
    :ref:`engine_insertmanyvalues` performance optimization feature first
    introduced in the 2.0 series. This was a continuation of the change in
    2.0.9 which disabled the SQL Server version of the feature due to a
    reliance in the ORM on apparent row ordering that is not guaranteed to take
    place. The fix applies new logic to all "insertmanyvalues" operations,
    which takes effect when a new parameter
    :paramref:`_dml.Insert.returning.sort_by_parameter_order` on the
    :meth:`_dml.Insert.returning` or :meth:`_dml.UpdateBase.return_defaults`
    methods, that through a combination of alternate SQL forms, direct
    correspondence of client side parameters, and in some cases downgrading to
    running row-at-a-time, will apply sorting to each batch of returned rows
    using correspondence to primary key or other unique values in each row
    which can be correlated to the input data.

    Performance impact is expected to be minimal as nearly all common primary
    key scenarios are suitable for parameter-ordered batching to be
    achieved for all backends other than SQLite, while "row-at-a-time"
    mode operates with a bare minimum of Python overhead compared to the very
    heavyweight approaches used in the 1.x series. For SQLite, there is no
    difference in performance when "row-at-a-time" mode is used.

    It's anticipated that with an efficient "row-at-a-time" INSERT with
    RETURNING batching capability, the "insertmanyvalues" feature can be later
    be more easily generalized to third party backends that include RETURNING
    support but not necessarily easy ways to guarantee a correspondence
    with parameter order.

    .. seealso::

        :ref:`engine_insertmanyvalues_returning_order`


.. change::
    :tags: bug, mssql
    :tickets: 9618, 9603

    Restored the :term:`insertmanyvalues` feature for Microsoft SQL Server.
    This feature was disabled in version 2.0.9 due to an apparent reliance
    on the ordering of RETURNING that is not guaranteed.   The architecture of
    the "insertmanyvalues" feature has been reworked to accommodate for
    specific organizations of INSERT statements and result row handling that
    can guarantee the correspondence of returned rows to input records.

    .. seealso::

      :ref:`engine_insertmanyvalues_returning_order`

