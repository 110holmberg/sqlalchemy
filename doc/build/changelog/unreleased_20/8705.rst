.. change::
    :tags: bug, orm, declarative
    :tickets: 8705

    Changed a fundamental configuration behavior of :class:`.Mapper`, where
    :class:`_schema.Column` objects that are explicitly present in the
    :paramref:`_orm.Mapper.properties` dictionary, either directly or enclosed
    within a mapper property object, will now be mapped within the order of how
    they appear within the mapped :class:`.Table` (or other selectable) itself
    (assuming they are in fact part of that table's list of columns), thereby
    maintaining the same order of columns in the mapped selectable as is
    instrumented on the mapped class, as well as what renders in an ORM SELECT
    statement for that mapper. Previously (where "previously" means since
    version 0.0.1), :class:`.Column` objects in the
    :paramref:`_orm.Mapper.properties` dictionary would always be mapped first,
    ahead of when the other columns in the mapped :class:`.Table` would be
    mapped, causing a discrepancy in the order in which the mapper would
    assign attributes to the mapped class as well as the order in which they
    would render in statements.

    The change most prominently takes place in the way that Declarative
    assigns declared columns to the :class:`.Mapper`, specifically how
    :class:`.Column` (or :func:`_orm.mapped_column`) objects are handled
    when they have a DDL name that is explicitly different from the mapped
    attribute name, as well as when constructs such as :func:`_orm.deferred`
    etc. are used.   The new behavior will see the column ordering within
    the mapped :class:`.Table` being the same order in which the attributes
    are mapped onto the class, assigned within the :class:`.Mapper` itself,
    and rendered in ORM statements such as SELECT statements, independent
    of how the :class:`_schema.Column` was configured against the
    :class:`.Mapper`.
